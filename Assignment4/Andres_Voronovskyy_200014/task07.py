# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/a-skyy/Curso2025-2026/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

result = []  # list of tuples

# Buscar todas las clases
for cls in g.subjects(RDF.type, RDFS.Class):
    # Buscar superclases (si existen)
    supers = list(g.objects(cls, RDFS.subClassOf))
    if supers:
        for s in supers:
            result.append((cls, s))
    else:
        result.append((cls, None))

# Mostrar resultados
print("=== Task 7.1a Results ===")
for r in result:
    print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
SELECT DISTINCT ?c ?sc
WHERE {
  ?c a rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc. }
}
"""

print("=== Task 7.1b Results ===")
for r in g.query(query):
    print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# Lista a devolver
individuals = []

# Funci√≥n recursiva para obtener todas las subclases
def get_subclasses(cls):
    subclasses = set()
    for sub in g.subjects(RDFS.subClassOf, cls):
        subclasses.add(sub)
        subclasses |= get_subclasses(sub)
    return subclasses

# Obtener Person + todas sus subclases
all_classes = {ns.Person} | get_subclasses(ns.Person)

# Buscar individuos de todas esas clases
for c in all_classes:
    for ind in g.subjects(RDF.type, c):
        individuals.append(ind)

# Mostrar resultados
print("=== Task 7.2a Individuals of Person ===")
for i in individuals:
    print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?ind
WHERE {
  ?ind rdf:type/rdfs:subClassOf* ns:Person .
}
"""

print("=== Task 7.2b Results ===")
for r in g.query(query):
    print(r.ind)

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name ?type
WHERE {
  ?person ns:knows ns:Rocky .
  ?person rdf:type ?type .
  OPTIONAL { ?person ns:hasName ?name . }
  OPTIONAL { ?person rdfs:label ?name . }
}
"""

print("=== Task 7.3 Results ===")
for r in g.query(query):
    print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name
WHERE {
  {
    ?person ns:hasColleague ?col1 .
    ?col1 ns:ownsPet ?pet1 .
    ?pet1 a ns:Animal .
  }
  UNION
  {
    ?person ns:hasColleague ?col2 .
    ?col2 ns:hasColleague ?col3 .
    ?col3 ns:ownsPet ?pet2 .
    ?pet2 a ns:Animal .
  }
  OPTIONAL { ?person ns:hasName ?name . }
  OPTIONAL { ?person rdfs:label ?name . }
}
"""

print("=== Task 7.4 Results ===")
for r in g.query(query):
    print(r.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")