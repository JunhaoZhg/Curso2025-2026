# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mifAy661Q_gfU9dGNYYkYACxCXUgxQay

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

#TASK 7.1a

qres = g.query(
    """
    SELECT ?class ?superclass
    WHERE {
        ?class a rdfs:Class .
        OPTIONAL { ?class rdfs:subClassOf ?superclass . }
    }
    """
)

# Crear lista de tuplas
result = []
for row in qres:
    result.append((str(row["class"]), str(row["superclass"]) if row["superclass"] else None))

# Mostrar resultado

for r in result:
    print(r)

# Visualize the results
#result = [] #list of tuples
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""\**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

#TASK 7.1b

qres = g.query(
    """
    SELECT ?c ?sc
    WHERE {
        ?c a rdfs:Class .
        OPTIONAL { ?c rdfs:subClassOf ?sc . }
    }
    """
)

# lista de tuplas (class, superclass)
result = []
for row in qres:
    result.append((str(row["c"]), str(row["sc"]) if row["sc"] else None))

# Mostrar resultado
for r in result:
    print(r)

query =  """
SELECT ?c ?sc
WHERE {
    ?c a rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

from rdflib import Graph, Namespace, RDF, RDFS



ns = Namespace("http://oeg.fi.upm.es/def/people#")

# Funci√≥n recursiva para obtener todas las subclases de Person
def get_all_subclasses(cls, graph):
    subclasses = set()
    for sub in graph.subjects(RDFS.subClassOf, cls):
        subclasses.add(sub)
        subclasses.update(get_all_subclasses(sub, graph))
    return subclasses

# Obtenemos todas las subclases de Person (directas e indirectas)
subclasses = get_all_subclasses(ns.Person, g)
subclasses.add(ns.Person)

# Lista de individuos que son instancias de Person o sus subclases
individuals = []
for s, o in g.subject_objects(RDF.type):
    if o in subclasses:
        individuals.append(s)

#ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
#individuals = []
# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
SELECT ?ind WHERE {
  ?class rdfs:subClassOf* <http://oeg.fi.upm.es/def/people#Person> .
  ?ind a ?class .
}
"""
for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""'''**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**'''

"""

#TASK 7.3
query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT ?name ?type WHERE {
  ?x ns:knows ns:Rocky .
  ?x rdfs:label ?name .
  ?x rdf:type ?type .
}
"""



for r in g.query(query):
  print(r.name, r.type)

#query =  """select
#  }"""
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name WHERE {
  {
    ?person ns:hasColleague ?colleague .
    ?colleague ns:ownsPet ?pet .
    ?pet rdf:type ns:Dog .
    ?person ns:name ?name .
  }
  UNION
  {
    ?person ns:hasColleague ?colleague .
    ?colleague1 ns:hasColleague ?colleague2 .
    ?colleague2 ns:ownsPet ?pet .
    ?pet a ns:Animal .
  }
  ?person rdfs:label ?name .
}


"""

# Ejecutamos la consulta
results = g.query(query)

# Mostramos los resultados
print("Entidades con colegas (directos o indirectos) que tienen perros:")
for row in results:
    print(" -", row.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")