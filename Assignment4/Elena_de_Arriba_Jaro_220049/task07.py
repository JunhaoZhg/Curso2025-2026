# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GsEE79sgcuvdcnRx8nEKzhKv08_ITWT-

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] # variable que devuelvo

for s, p, o in g.triples((None, RDF.type, RDFS.Class)):
    superclass = None                                         # incializamos la superclase como None
    for _, _, sc in g.triples((s, RDFS.subClassOf, None)):    # miro si tiene superclase y la guardo
        superclass = sc
    result.append((s, superclass))

for r in result:
    print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = '''
SELECT DISTINCT ?c ?sc WHERE {  # devuelvo la clase y la superclase
  ?c rdf:type rdfs:Class .

  OPTIONAL { ?c rdfs:subClassOf ?sc }
}
'''

for r in g.query(query):
    print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

individuals = [] # variable que devuelvo

# Buscar todas las clases que heredan de Person
classes_to_check = [ns.Person]
checked = set()

while classes_to_check:
    current = classes_to_check.pop()
    if current not in checked:
        checked.add(current)
        for subclass in g.subjects(RDFS.subClassOf, current):
            classes_to_check.append(subclass)

# Individuos de las clases que heredan de Person
for cls in checked:
    for s in g.subjects(RDF.type, cls):
        individuals.append(s)

# Visualizar resultados
for i in individuals:
    print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX pers: <http://oeg.fi.upm.es/def/people#>
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?ind WHERE {
  ?ind rdf:type ?type .
  ?type rdfs:subClassOf* pers:Person .
}
"""

for r in g.query(query):
    print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://oeg.fi.upm.es/def/people#>

SELECT ?name ?type
WHERE {
  ?person ns:knows ns:Rocky .   # me da la persona que conoce a Rocky
  ?person rdfs:label ?name .    # el nombre de la persona
  ?person rdf:type ?type .      # el tipo de la persona
}
"""

for r in g.query(query):
    print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX : <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name
WHERE {
  {
    ?person :hasColleague ?colleague .      # hasColleague with a dog
    ?colleague :ownsPet ?Animal .           # que su mascota sea un perro
  }
  UNION
  {
    ?person :hasColleague ?colleague .         # has a colleague who has a colleague who has a dog
    ?colleague :hasColleague ?otrocolleague .  # que tenga otro colleague
    ?otrocolleague :ownsPet ?Animal .          # que ese otro colleague tenga un perro
  }
  ?person rdfs:label ?name .                # obtengo el nombre de la persona
}
"""

for r in g.query(query):
    print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")