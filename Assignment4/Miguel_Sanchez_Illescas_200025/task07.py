# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
classes = set()

for s, p, o in g:
    if p == RDF.type and o == RDFS.Class:
        classes.add(s)

for s, p, o in g:
    if p == RDFS.subClassOf:
        classes.add(o)

for s, p, o in g:
    if p == RDF.type and str(o).startswith('http://oeg.fi.upm.es/def/people#'):
        classes.add(o)

result = []
for cls in classes:
    superclass = None
    for s, p, o in g:
        if s == cls and p == RDFS.subClassOf:
            superclass = o
            break
    result.append((cls, superclass))

# Visualize the results
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?c ?sc WHERE {
    {
        ?c a rdfs:Class .
        OPTIONAL { ?c rdfs:subClassOf ?sc . }
    }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

individuals = []

person_classes = set([ns.Person])

def find_subclasses(cls):
    subclasses = set()
    for s, p, o in g:
        if p == RDFS.subClassOf and o == cls:
            subclasses.add(s)
            subclasses.update(find_subclasses(s))  # recursive
    return subclasses

person_classes.update(find_subclasses(ns.Person))

for s, p, o in g:
    if p == RDF.type and o in person_classes:
        individuals.append(s)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT ?ind WHERE {
    ?ind a ?type .
    ?type rdfs:subClassOf* ns:Person .
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT ?name ?type WHERE {
    ?person ns:knows ns:Rocky .
    ?person rdfs:label ?name .
}
"""
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
SELECT DISTINCT ?name WHERE {
    ?person rdfs:label ?name .
    {
        ?person ns:hasColleague ?colleague .
        ?colleague ns:ownsPet ?pet .
    } UNION {
        ?person ns:hasColleague ?colleague1 .
        ?colleague1 ns:hasColleague ?colleague2 .
        ?colleague2 ns:ownsPet ?pet .
    }
}
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")