# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WuK8TyBarOR3CIQFDgew31C34t_PlhDh

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
result = []  # lista de tuplas (class, superclass_or_None)

# Busco las clases, evitando los duplicados, y para cada una obtengo su rdfs:subClassOf si existe.
classes_seen = set()
for cls in g.subjects(RDF.type, RDFS.Class):
    if cls in classes_seen:
        continue
    classes_seen.add(cls)
    superclasses = list(g.objects(subject=cls, predicate=RDFS.subClassOf))
    if superclasses:
        # Si hay varias superclases, añado una tupla por cada superclase
        for sc in superclasses:
            result.append((cls, sc))
    else:
        result.append((cls, None))

# Visualize the results
for r in result:
    print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?c ?sc
WHERE {
    ?c rdf:type rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
ORDER BY ?c
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []
# Recogemos todas las Person más todas sus subclases transitivas Person
person_classes = set()
person_classes.add(ns.Person)

# descubrimiento recursivo de subclases
def gather_subclasses(cls):
    for sub in g.subjects(RDFS.subClassOf, cls):
        if sub not in person_classes:
            person_classes.add(sub)
            gather_subclasses(sub)

gather_subclasses(ns.Person)

# Recopilo todos los individuos cuyo rdf:type sea cualquiera de estas clases.
for cls in person_classes:
    for ind in g.subjects(RDF.type, cls):
        if ind not in individuals:
            individuals.append(ind)
# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = f"""
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?ind
WHERE {{
    # rdf:type can be a class which is Person or a subclass (transitive)
    ?ind rdf:type/rdfs:subClassOf* <{ns}Person> .
}}
ORDER BY ?ind
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

# TO DO
query = """
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?name ?type
WHERE {
    ?person ns:knows ns:Rocky .
    ?person rdf:type ?type .
    # try to get a human-readable name either from hasName or rdfs:label
    {
      ?person ns:hasName ?name .
    }
    UNION
    {
      ?person rdfs:label ?name .
    }
}
ORDER BY ?name
"""
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

# TO DO

query = """
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  {
    # caso A: colega directo posee una mascota (Animal)
    ?s ns:hasColleague/ns:ownsPet ?pet .
    ?pet rdf:type ns:Animal .
  }
  UNION
  {
    # caso B: colega->colega posee una mascota (Animal)
    ?s ns:hasColleague/ns:hasColleague/ns:ownsPet ?pet2 .
    ?pet2 rdf:type ns:Animal .
  }

  ?s rdfs:label ?name .
}
ORDER BY ?name
"""

# Visualize the results
for r in g.query(query):
  print(r.name)

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")